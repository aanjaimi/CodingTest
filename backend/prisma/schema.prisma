// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  username     String         @unique
  firstName    String
  lastName     String
  email        String         @unique
  password     String
  Bio          String
  birthday     DateTime
  location     String
  status       String         @default("OFFLINE")
  avatar       Json
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Question     Question[]
  Answer       Answer[]
  QuestionLike QuestionLike[]
  Favorite     Favorite[]
  senderNotification   Notification[] @relation("sender")
  receiverNotification Notification[] @relation("receiver")
  Message      Message[]
  // friends of the User
  friends              Friend[]       @relation("userFriends")
  // users who are Friends with this User
  myFriends            Friend[]       @relation("friendsOfUser")
}

enum Topic {
  GLOBAL
  SPORTS
  POLITICS
  TECHNOLOGY
  ENTERTAINMENT
  BUSINESS
  HEALTH
  SCIENCE
  EDUCATION
  TRAVEL
  FOOD
  FASHION
  LIFESTYLE
  RELATIONSHIPS
}

model Question {
  id            String         @id @default(uuid())
  title         String
  content       String
  topic         Topic          @default(GLOBAL)
  location      String
  userId        String
  answers       Answer[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  questionLikes QuestionLike[]
  favorites     Favorite[]
}

model Favorite {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model QuestionLike {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Answer {
  id         String   @id @default(uuid())
  content    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

enum NotifType {
  MESSAGE
  FRIEND_REQUEST
  FRIEND_ACCEPT
}

model Notification {
  id      String    @id @default(cuid())
  content Json?
  type    NotifType @map("notif_type")

  sender     User   @relation(name: "sender", fields: [senderId], references: [id])
  senderId   String @map("sender_id")
  receiver   User   @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId String @map("receiver_id")

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("notifications")
}

enum FriendState {
  NONE
  BLOCKED
  PENDING
  ACCEPTED
}

model Friend {
  id       String      @id @default(cuid())
  state    FriendState
  user     User        @relation(name: "userFriends", fields: [userId], references: [id])
  userId   String      @map("user_id")
  friend   User        @relation(name: "friendsOfUser", fields: [friendId], references: [id])
  friendId String      @map("friend_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("friends")
}

model Message {
  id      String @id @default(cuid())
  content String

  user      User   @relation(fields: [userId], references: [id])
  userId    String @map("user_id")

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("messages")
}
